/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ludapivovarevich;

import ludapivovarevich.FamilyPlants;
import ludapivovarevich.Plant;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-04-17")
public class Service {

  public interface Iface {

    public java.util.List<FamilyPlants> getListFamilyPlants() throws org.apache.thrift.TException;

    public void addFamilyPlants(FamilyPlants familyPlants) throws org.apache.thrift.TException;

    public void deleteFamilyPlants(int index) throws org.apache.thrift.TException;

    public void changeFamilyPlants(int index, FamilyPlants familyPlants) throws org.apache.thrift.TException;

    public java.util.List<Plant> getListPlants(int indexFamily) throws org.apache.thrift.TException;

    public void addPlant(Plant plant, int indexFamily) throws org.apache.thrift.TException;

    public void deletePlant(int index, int indexFamily) throws org.apache.thrift.TException;

    public void changePlant(int index, Plant plant, int indexFamily) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getListFamilyPlants(org.apache.thrift.async.AsyncMethodCallback<java.util.List<FamilyPlants>> resultHandler) throws org.apache.thrift.TException;

    public void addFamilyPlants(FamilyPlants familyPlants, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void deleteFamilyPlants(int index, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void changeFamilyPlants(int index, FamilyPlants familyPlants, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getListPlants(int indexFamily, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Plant>> resultHandler) throws org.apache.thrift.TException;

    public void addPlant(Plant plant, int indexFamily, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void deletePlant(int index, int indexFamily, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void changePlant(int index, Plant plant, int indexFamily, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<FamilyPlants> getListFamilyPlants() throws org.apache.thrift.TException
    {
      send_getListFamilyPlants();
      return recv_getListFamilyPlants();
    }

    public void send_getListFamilyPlants() throws org.apache.thrift.TException
    {
      getListFamilyPlants_args args = new getListFamilyPlants_args();
      sendBase("getListFamilyPlants", args);
    }

    public java.util.List<FamilyPlants> recv_getListFamilyPlants() throws org.apache.thrift.TException
    {
      getListFamilyPlants_result result = new getListFamilyPlants_result();
      receiveBase(result, "getListFamilyPlants");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListFamilyPlants failed: unknown result");
    }

    public void addFamilyPlants(FamilyPlants familyPlants) throws org.apache.thrift.TException
    {
      send_addFamilyPlants(familyPlants);
      recv_addFamilyPlants();
    }

    public void send_addFamilyPlants(FamilyPlants familyPlants) throws org.apache.thrift.TException
    {
      addFamilyPlants_args args = new addFamilyPlants_args();
      args.setFamilyPlants(familyPlants);
      sendBase("addFamilyPlants", args);
    }

    public void recv_addFamilyPlants() throws org.apache.thrift.TException
    {
      addFamilyPlants_result result = new addFamilyPlants_result();
      receiveBase(result, "addFamilyPlants");
      return;
    }

    public void deleteFamilyPlants(int index) throws org.apache.thrift.TException
    {
      send_deleteFamilyPlants(index);
      recv_deleteFamilyPlants();
    }

    public void send_deleteFamilyPlants(int index) throws org.apache.thrift.TException
    {
      deleteFamilyPlants_args args = new deleteFamilyPlants_args();
      args.setIndex(index);
      sendBase("deleteFamilyPlants", args);
    }

    public void recv_deleteFamilyPlants() throws org.apache.thrift.TException
    {
      deleteFamilyPlants_result result = new deleteFamilyPlants_result();
      receiveBase(result, "deleteFamilyPlants");
      return;
    }

    public void changeFamilyPlants(int index, FamilyPlants familyPlants) throws org.apache.thrift.TException
    {
      send_changeFamilyPlants(index, familyPlants);
      recv_changeFamilyPlants();
    }

    public void send_changeFamilyPlants(int index, FamilyPlants familyPlants) throws org.apache.thrift.TException
    {
      changeFamilyPlants_args args = new changeFamilyPlants_args();
      args.setIndex(index);
      args.setFamilyPlants(familyPlants);
      sendBase("changeFamilyPlants", args);
    }

    public void recv_changeFamilyPlants() throws org.apache.thrift.TException
    {
      changeFamilyPlants_result result = new changeFamilyPlants_result();
      receiveBase(result, "changeFamilyPlants");
      return;
    }

    public java.util.List<Plant> getListPlants(int indexFamily) throws org.apache.thrift.TException
    {
      send_getListPlants(indexFamily);
      return recv_getListPlants();
    }

    public void send_getListPlants(int indexFamily) throws org.apache.thrift.TException
    {
      getListPlants_args args = new getListPlants_args();
      args.setIndexFamily(indexFamily);
      sendBase("getListPlants", args);
    }

    public java.util.List<Plant> recv_getListPlants() throws org.apache.thrift.TException
    {
      getListPlants_result result = new getListPlants_result();
      receiveBase(result, "getListPlants");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListPlants failed: unknown result");
    }

    public void addPlant(Plant plant, int indexFamily) throws org.apache.thrift.TException
    {
      send_addPlant(plant, indexFamily);
      recv_addPlant();
    }

    public void send_addPlant(Plant plant, int indexFamily) throws org.apache.thrift.TException
    {
      addPlant_args args = new addPlant_args();
      args.setPlant(plant);
      args.setIndexFamily(indexFamily);
      sendBase("addPlant", args);
    }

    public void recv_addPlant() throws org.apache.thrift.TException
    {
      addPlant_result result = new addPlant_result();
      receiveBase(result, "addPlant");
      return;
    }

    public void deletePlant(int index, int indexFamily) throws org.apache.thrift.TException
    {
      send_deletePlant(index, indexFamily);
      recv_deletePlant();
    }

    public void send_deletePlant(int index, int indexFamily) throws org.apache.thrift.TException
    {
      deletePlant_args args = new deletePlant_args();
      args.setIndex(index);
      args.setIndexFamily(indexFamily);
      sendBase("deletePlant", args);
    }

    public void recv_deletePlant() throws org.apache.thrift.TException
    {
      deletePlant_result result = new deletePlant_result();
      receiveBase(result, "deletePlant");
      return;
    }

    public void changePlant(int index, Plant plant, int indexFamily) throws org.apache.thrift.TException
    {
      send_changePlant(index, plant, indexFamily);
      recv_changePlant();
    }

    public void send_changePlant(int index, Plant plant, int indexFamily) throws org.apache.thrift.TException
    {
      changePlant_args args = new changePlant_args();
      args.setIndex(index);
      args.setPlant(plant);
      args.setIndexFamily(indexFamily);
      sendBase("changePlant", args);
    }

    public void recv_changePlant() throws org.apache.thrift.TException
    {
      changePlant_result result = new changePlant_result();
      receiveBase(result, "changePlant");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getListFamilyPlants(org.apache.thrift.async.AsyncMethodCallback<java.util.List<FamilyPlants>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListFamilyPlants_call method_call = new getListFamilyPlants_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListFamilyPlants_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<FamilyPlants>> {
      public getListFamilyPlants_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<FamilyPlants>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListFamilyPlants", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListFamilyPlants_args args = new getListFamilyPlants_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<FamilyPlants> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListFamilyPlants();
      }
    }

    public void addFamilyPlants(FamilyPlants familyPlants, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addFamilyPlants_call method_call = new addFamilyPlants_call(familyPlants, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addFamilyPlants_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private FamilyPlants familyPlants;
      public addFamilyPlants_call(FamilyPlants familyPlants, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.familyPlants = familyPlants;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFamilyPlants", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addFamilyPlants_args args = new addFamilyPlants_args();
        args.setFamilyPlants(familyPlants);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void deleteFamilyPlants(int index, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFamilyPlants_call method_call = new deleteFamilyPlants_call(index, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFamilyPlants_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int index;
      public deleteFamilyPlants_call(int index, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.index = index;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFamilyPlants", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFamilyPlants_args args = new deleteFamilyPlants_args();
        args.setIndex(index);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void changeFamilyPlants(int index, FamilyPlants familyPlants, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeFamilyPlants_call method_call = new changeFamilyPlants_call(index, familyPlants, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeFamilyPlants_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int index;
      private FamilyPlants familyPlants;
      public changeFamilyPlants_call(int index, FamilyPlants familyPlants, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.index = index;
        this.familyPlants = familyPlants;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeFamilyPlants", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeFamilyPlants_args args = new changeFamilyPlants_args();
        args.setIndex(index);
        args.setFamilyPlants(familyPlants);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getListPlants(int indexFamily, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Plant>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListPlants_call method_call = new getListPlants_call(indexFamily, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListPlants_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Plant>> {
      private int indexFamily;
      public getListPlants_call(int indexFamily, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Plant>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.indexFamily = indexFamily;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListPlants", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListPlants_args args = new getListPlants_args();
        args.setIndexFamily(indexFamily);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Plant> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListPlants();
      }
    }

    public void addPlant(Plant plant, int indexFamily, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPlant_call method_call = new addPlant_call(plant, indexFamily, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPlant_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private Plant plant;
      private int indexFamily;
      public addPlant_call(Plant plant, int indexFamily, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.plant = plant;
        this.indexFamily = indexFamily;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPlant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPlant_args args = new addPlant_args();
        args.setPlant(plant);
        args.setIndexFamily(indexFamily);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void deletePlant(int index, int indexFamily, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deletePlant_call method_call = new deletePlant_call(index, indexFamily, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deletePlant_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int index;
      private int indexFamily;
      public deletePlant_call(int index, int indexFamily, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.index = index;
        this.indexFamily = indexFamily;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deletePlant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deletePlant_args args = new deletePlant_args();
        args.setIndex(index);
        args.setIndexFamily(indexFamily);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void changePlant(int index, Plant plant, int indexFamily, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changePlant_call method_call = new changePlant_call(index, plant, indexFamily, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changePlant_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int index;
      private Plant plant;
      private int indexFamily;
      public changePlant_call(int index, Plant plant, int indexFamily, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.index = index;
        this.plant = plant;
        this.indexFamily = indexFamily;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changePlant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changePlant_args args = new changePlant_args();
        args.setIndex(index);
        args.setPlant(plant);
        args.setIndexFamily(indexFamily);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getListFamilyPlants", new getListFamilyPlants());
      processMap.put("addFamilyPlants", new addFamilyPlants());
      processMap.put("deleteFamilyPlants", new deleteFamilyPlants());
      processMap.put("changeFamilyPlants", new changeFamilyPlants());
      processMap.put("getListPlants", new getListPlants());
      processMap.put("addPlant", new addPlant());
      processMap.put("deletePlant", new deletePlant());
      processMap.put("changePlant", new changePlant());
      return processMap;
    }

    public static class getListFamilyPlants<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListFamilyPlants_args> {
      public getListFamilyPlants() {
        super("getListFamilyPlants");
      }

      public getListFamilyPlants_args getEmptyArgsInstance() {
        return new getListFamilyPlants_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getListFamilyPlants_result getResult(I iface, getListFamilyPlants_args args) throws org.apache.thrift.TException {
        getListFamilyPlants_result result = new getListFamilyPlants_result();
        result.success = iface.getListFamilyPlants();
        return result;
      }
    }

    public static class addFamilyPlants<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFamilyPlants_args> {
      public addFamilyPlants() {
        super("addFamilyPlants");
      }

      public addFamilyPlants_args getEmptyArgsInstance() {
        return new addFamilyPlants_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public addFamilyPlants_result getResult(I iface, addFamilyPlants_args args) throws org.apache.thrift.TException {
        addFamilyPlants_result result = new addFamilyPlants_result();
        iface.addFamilyPlants(args.familyPlants);
        return result;
      }
    }

    public static class deleteFamilyPlants<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFamilyPlants_args> {
      public deleteFamilyPlants() {
        super("deleteFamilyPlants");
      }

      public deleteFamilyPlants_args getEmptyArgsInstance() {
        return new deleteFamilyPlants_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public deleteFamilyPlants_result getResult(I iface, deleteFamilyPlants_args args) throws org.apache.thrift.TException {
        deleteFamilyPlants_result result = new deleteFamilyPlants_result();
        iface.deleteFamilyPlants(args.index);
        return result;
      }
    }

    public static class changeFamilyPlants<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeFamilyPlants_args> {
      public changeFamilyPlants() {
        super("changeFamilyPlants");
      }

      public changeFamilyPlants_args getEmptyArgsInstance() {
        return new changeFamilyPlants_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public changeFamilyPlants_result getResult(I iface, changeFamilyPlants_args args) throws org.apache.thrift.TException {
        changeFamilyPlants_result result = new changeFamilyPlants_result();
        iface.changeFamilyPlants(args.index, args.familyPlants);
        return result;
      }
    }

    public static class getListPlants<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListPlants_args> {
      public getListPlants() {
        super("getListPlants");
      }

      public getListPlants_args getEmptyArgsInstance() {
        return new getListPlants_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getListPlants_result getResult(I iface, getListPlants_args args) throws org.apache.thrift.TException {
        getListPlants_result result = new getListPlants_result();
        result.success = iface.getListPlants(args.indexFamily);
        return result;
      }
    }

    public static class addPlant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPlant_args> {
      public addPlant() {
        super("addPlant");
      }

      public addPlant_args getEmptyArgsInstance() {
        return new addPlant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public addPlant_result getResult(I iface, addPlant_args args) throws org.apache.thrift.TException {
        addPlant_result result = new addPlant_result();
        iface.addPlant(args.plant, args.indexFamily);
        return result;
      }
    }

    public static class deletePlant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deletePlant_args> {
      public deletePlant() {
        super("deletePlant");
      }

      public deletePlant_args getEmptyArgsInstance() {
        return new deletePlant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public deletePlant_result getResult(I iface, deletePlant_args args) throws org.apache.thrift.TException {
        deletePlant_result result = new deletePlant_result();
        iface.deletePlant(args.index, args.indexFamily);
        return result;
      }
    }

    public static class changePlant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changePlant_args> {
      public changePlant() {
        super("changePlant");
      }

      public changePlant_args getEmptyArgsInstance() {
        return new changePlant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public changePlant_result getResult(I iface, changePlant_args args) throws org.apache.thrift.TException {
        changePlant_result result = new changePlant_result();
        iface.changePlant(args.index, args.plant, args.indexFamily);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getListFamilyPlants", new getListFamilyPlants());
      processMap.put("addFamilyPlants", new addFamilyPlants());
      processMap.put("deleteFamilyPlants", new deleteFamilyPlants());
      processMap.put("changeFamilyPlants", new changeFamilyPlants());
      processMap.put("getListPlants", new getListPlants());
      processMap.put("addPlant", new addPlant());
      processMap.put("deletePlant", new deletePlant());
      processMap.put("changePlant", new changePlant());
      return processMap;
    }

    public static class getListFamilyPlants<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getListFamilyPlants_args, java.util.List<FamilyPlants>> {
      public getListFamilyPlants() {
        super("getListFamilyPlants");
      }

      public getListFamilyPlants_args getEmptyArgsInstance() {
        return new getListFamilyPlants_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<FamilyPlants>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<FamilyPlants>>() { 
          public void onComplete(java.util.List<FamilyPlants> o) {
            getListFamilyPlants_result result = new getListFamilyPlants_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getListFamilyPlants_result result = new getListFamilyPlants_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getListFamilyPlants_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<FamilyPlants>> resultHandler) throws org.apache.thrift.TException {
        iface.getListFamilyPlants(resultHandler);
      }
    }

    public static class addFamilyPlants<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addFamilyPlants_args, Void> {
      public addFamilyPlants() {
        super("addFamilyPlants");
      }

      public addFamilyPlants_args getEmptyArgsInstance() {
        return new addFamilyPlants_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addFamilyPlants_result result = new addFamilyPlants_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addFamilyPlants_result result = new addFamilyPlants_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addFamilyPlants_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addFamilyPlants(args.familyPlants,resultHandler);
      }
    }

    public static class deleteFamilyPlants<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFamilyPlants_args, Void> {
      public deleteFamilyPlants() {
        super("deleteFamilyPlants");
      }

      public deleteFamilyPlants_args getEmptyArgsInstance() {
        return new deleteFamilyPlants_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteFamilyPlants_result result = new deleteFamilyPlants_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteFamilyPlants_result result = new deleteFamilyPlants_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteFamilyPlants_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteFamilyPlants(args.index,resultHandler);
      }
    }

    public static class changeFamilyPlants<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeFamilyPlants_args, Void> {
      public changeFamilyPlants() {
        super("changeFamilyPlants");
      }

      public changeFamilyPlants_args getEmptyArgsInstance() {
        return new changeFamilyPlants_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            changeFamilyPlants_result result = new changeFamilyPlants_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            changeFamilyPlants_result result = new changeFamilyPlants_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeFamilyPlants_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.changeFamilyPlants(args.index, args.familyPlants,resultHandler);
      }
    }

    public static class getListPlants<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getListPlants_args, java.util.List<Plant>> {
      public getListPlants() {
        super("getListPlants");
      }

      public getListPlants_args getEmptyArgsInstance() {
        return new getListPlants_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Plant>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Plant>>() { 
          public void onComplete(java.util.List<Plant> o) {
            getListPlants_result result = new getListPlants_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getListPlants_result result = new getListPlants_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getListPlants_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Plant>> resultHandler) throws org.apache.thrift.TException {
        iface.getListPlants(args.indexFamily,resultHandler);
      }
    }

    public static class addPlant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPlant_args, Void> {
      public addPlant() {
        super("addPlant");
      }

      public addPlant_args getEmptyArgsInstance() {
        return new addPlant_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addPlant_result result = new addPlant_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addPlant_result result = new addPlant_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addPlant_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addPlant(args.plant, args.indexFamily,resultHandler);
      }
    }

    public static class deletePlant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deletePlant_args, Void> {
      public deletePlant() {
        super("deletePlant");
      }

      public deletePlant_args getEmptyArgsInstance() {
        return new deletePlant_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deletePlant_result result = new deletePlant_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deletePlant_result result = new deletePlant_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deletePlant_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deletePlant(args.index, args.indexFamily,resultHandler);
      }
    }

    public static class changePlant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changePlant_args, Void> {
      public changePlant() {
        super("changePlant");
      }

      public changePlant_args getEmptyArgsInstance() {
        return new changePlant_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            changePlant_result result = new changePlant_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            changePlant_result result = new changePlant_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changePlant_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.changePlant(args.index, args.plant, args.indexFamily,resultHandler);
      }
    }

  }

  public static class getListFamilyPlants_args implements org.apache.thrift.TBase<getListFamilyPlants_args, getListFamilyPlants_args._Fields>, java.io.Serializable, Cloneable, Comparable<getListFamilyPlants_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListFamilyPlants_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getListFamilyPlants_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getListFamilyPlants_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListFamilyPlants_args.class, metaDataMap);
    }

    public getListFamilyPlants_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListFamilyPlants_args(getListFamilyPlants_args other) {
    }

    public getListFamilyPlants_args deepCopy() {
      return new getListFamilyPlants_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListFamilyPlants_args)
        return this.equals((getListFamilyPlants_args)that);
      return false;
    }

    public boolean equals(getListFamilyPlants_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getListFamilyPlants_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListFamilyPlants_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListFamilyPlants_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getListFamilyPlants_argsStandardScheme getScheme() {
        return new getListFamilyPlants_argsStandardScheme();
      }
    }

    private static class getListFamilyPlants_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getListFamilyPlants_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListFamilyPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListFamilyPlants_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListFamilyPlants_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getListFamilyPlants_argsTupleScheme getScheme() {
        return new getListFamilyPlants_argsTupleScheme();
      }
    }

    private static class getListFamilyPlants_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getListFamilyPlants_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListFamilyPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListFamilyPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getListFamilyPlants_result implements org.apache.thrift.TBase<getListFamilyPlants_result, getListFamilyPlants_result._Fields>, java.io.Serializable, Cloneable, Comparable<getListFamilyPlants_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListFamilyPlants_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getListFamilyPlants_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getListFamilyPlants_resultTupleSchemeFactory();

    public java.util.List<FamilyPlants> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FamilyPlants.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListFamilyPlants_result.class, metaDataMap);
    }

    public getListFamilyPlants_result() {
    }

    public getListFamilyPlants_result(
      java.util.List<FamilyPlants> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListFamilyPlants_result(getListFamilyPlants_result other) {
      if (other.isSetSuccess()) {
        java.util.List<FamilyPlants> __this__success = new java.util.ArrayList<FamilyPlants>(other.success.size());
        for (FamilyPlants other_element : other.success) {
          __this__success.add(new FamilyPlants(other_element));
        }
        this.success = __this__success;
      }
    }

    public getListFamilyPlants_result deepCopy() {
      return new getListFamilyPlants_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FamilyPlants> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FamilyPlants elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<FamilyPlants>();
      }
      this.success.add(elem);
    }

    public java.util.List<FamilyPlants> getSuccess() {
      return this.success;
    }

    public getListFamilyPlants_result setSuccess(java.util.List<FamilyPlants> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<FamilyPlants>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListFamilyPlants_result)
        return this.equals((getListFamilyPlants_result)that);
      return false;
    }

    public boolean equals(getListFamilyPlants_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getListFamilyPlants_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListFamilyPlants_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListFamilyPlants_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getListFamilyPlants_resultStandardScheme getScheme() {
        return new getListFamilyPlants_resultStandardScheme();
      }
    }

    private static class getListFamilyPlants_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getListFamilyPlants_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListFamilyPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<FamilyPlants>(_list8.size);
                  FamilyPlants _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new FamilyPlants();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListFamilyPlants_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FamilyPlants _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListFamilyPlants_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getListFamilyPlants_resultTupleScheme getScheme() {
        return new getListFamilyPlants_resultTupleScheme();
      }
    }

    private static class getListFamilyPlants_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getListFamilyPlants_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListFamilyPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FamilyPlants _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListFamilyPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<FamilyPlants>(_list13.size);
            FamilyPlants _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new FamilyPlants();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addFamilyPlants_args implements org.apache.thrift.TBase<addFamilyPlants_args, addFamilyPlants_args._Fields>, java.io.Serializable, Cloneable, Comparable<addFamilyPlants_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFamilyPlants_args");

    private static final org.apache.thrift.protocol.TField FAMILY_PLANTS_FIELD_DESC = new org.apache.thrift.protocol.TField("familyPlants", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addFamilyPlants_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addFamilyPlants_argsTupleSchemeFactory();

    public FamilyPlants familyPlants; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FAMILY_PLANTS((short)1, "familyPlants");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FAMILY_PLANTS
            return FAMILY_PLANTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FAMILY_PLANTS, new org.apache.thrift.meta_data.FieldMetaData("familyPlants", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FamilyPlants.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFamilyPlants_args.class, metaDataMap);
    }

    public addFamilyPlants_args() {
    }

    public addFamilyPlants_args(
      FamilyPlants familyPlants)
    {
      this();
      this.familyPlants = familyPlants;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFamilyPlants_args(addFamilyPlants_args other) {
      if (other.isSetFamilyPlants()) {
        this.familyPlants = new FamilyPlants(other.familyPlants);
      }
    }

    public addFamilyPlants_args deepCopy() {
      return new addFamilyPlants_args(this);
    }

    @Override
    public void clear() {
      this.familyPlants = null;
    }

    public FamilyPlants getFamilyPlants() {
      return this.familyPlants;
    }

    public addFamilyPlants_args setFamilyPlants(FamilyPlants familyPlants) {
      this.familyPlants = familyPlants;
      return this;
    }

    public void unsetFamilyPlants() {
      this.familyPlants = null;
    }

    /** Returns true if field familyPlants is set (has been assigned a value) and false otherwise */
    public boolean isSetFamilyPlants() {
      return this.familyPlants != null;
    }

    public void setFamilyPlantsIsSet(boolean value) {
      if (!value) {
        this.familyPlants = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FAMILY_PLANTS:
        if (value == null) {
          unsetFamilyPlants();
        } else {
          setFamilyPlants((FamilyPlants)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FAMILY_PLANTS:
        return getFamilyPlants();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FAMILY_PLANTS:
        return isSetFamilyPlants();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFamilyPlants_args)
        return this.equals((addFamilyPlants_args)that);
      return false;
    }

    public boolean equals(addFamilyPlants_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_familyPlants = true && this.isSetFamilyPlants();
      boolean that_present_familyPlants = true && that.isSetFamilyPlants();
      if (this_present_familyPlants || that_present_familyPlants) {
        if (!(this_present_familyPlants && that_present_familyPlants))
          return false;
        if (!this.familyPlants.equals(that.familyPlants))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFamilyPlants()) ? 131071 : 524287);
      if (isSetFamilyPlants())
        hashCode = hashCode * 8191 + familyPlants.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addFamilyPlants_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFamilyPlants()).compareTo(other.isSetFamilyPlants());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamilyPlants()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyPlants, other.familyPlants);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFamilyPlants_args(");
      boolean first = true;

      sb.append("familyPlants:");
      if (this.familyPlants == null) {
        sb.append("null");
      } else {
        sb.append(this.familyPlants);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (familyPlants != null) {
        familyPlants.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFamilyPlants_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addFamilyPlants_argsStandardScheme getScheme() {
        return new addFamilyPlants_argsStandardScheme();
      }
    }

    private static class addFamilyPlants_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addFamilyPlants_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFamilyPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FAMILY_PLANTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.familyPlants = new FamilyPlants();
                struct.familyPlants.read(iprot);
                struct.setFamilyPlantsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFamilyPlants_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.familyPlants != null) {
          oprot.writeFieldBegin(FAMILY_PLANTS_FIELD_DESC);
          struct.familyPlants.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFamilyPlants_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addFamilyPlants_argsTupleScheme getScheme() {
        return new addFamilyPlants_argsTupleScheme();
      }
    }

    private static class addFamilyPlants_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addFamilyPlants_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFamilyPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFamilyPlants()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFamilyPlants()) {
          struct.familyPlants.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFamilyPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.familyPlants = new FamilyPlants();
          struct.familyPlants.read(iprot);
          struct.setFamilyPlantsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addFamilyPlants_result implements org.apache.thrift.TBase<addFamilyPlants_result, addFamilyPlants_result._Fields>, java.io.Serializable, Cloneable, Comparable<addFamilyPlants_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFamilyPlants_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addFamilyPlants_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addFamilyPlants_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFamilyPlants_result.class, metaDataMap);
    }

    public addFamilyPlants_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFamilyPlants_result(addFamilyPlants_result other) {
    }

    public addFamilyPlants_result deepCopy() {
      return new addFamilyPlants_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFamilyPlants_result)
        return this.equals((addFamilyPlants_result)that);
      return false;
    }

    public boolean equals(addFamilyPlants_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addFamilyPlants_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFamilyPlants_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFamilyPlants_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addFamilyPlants_resultStandardScheme getScheme() {
        return new addFamilyPlants_resultStandardScheme();
      }
    }

    private static class addFamilyPlants_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addFamilyPlants_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFamilyPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFamilyPlants_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFamilyPlants_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addFamilyPlants_resultTupleScheme getScheme() {
        return new addFamilyPlants_resultTupleScheme();
      }
    }

    private static class addFamilyPlants_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addFamilyPlants_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFamilyPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFamilyPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteFamilyPlants_args implements org.apache.thrift.TBase<deleteFamilyPlants_args, deleteFamilyPlants_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFamilyPlants_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFamilyPlants_args");

    private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteFamilyPlants_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteFamilyPlants_argsTupleSchemeFactory();

    public int index; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INDEX((short)1, "index");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INDEX
            return INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFamilyPlants_args.class, metaDataMap);
    }

    public deleteFamilyPlants_args() {
    }

    public deleteFamilyPlants_args(
      int index)
    {
      this();
      this.index = index;
      setIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFamilyPlants_args(deleteFamilyPlants_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.index = other.index;
    }

    public deleteFamilyPlants_args deepCopy() {
      return new deleteFamilyPlants_args(this);
    }

    @Override
    public void clear() {
      setIndexIsSet(false);
      this.index = 0;
    }

    public int getIndex() {
      return this.index;
    }

    public deleteFamilyPlants_args setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
      return this;
    }

    public void unsetIndex() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    public void setIndexIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INDEX:
        return getIndex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INDEX:
        return isSetIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFamilyPlants_args)
        return this.equals((deleteFamilyPlants_args)that);
      return false;
    }

    public boolean equals(deleteFamilyPlants_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + index;

      return hashCode;
    }

    @Override
    public int compareTo(deleteFamilyPlants_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFamilyPlants_args(");
      boolean first = true;

      sb.append("index:");
      sb.append(this.index);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFamilyPlants_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteFamilyPlants_argsStandardScheme getScheme() {
        return new deleteFamilyPlants_argsStandardScheme();
      }
    }

    private static class deleteFamilyPlants_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteFamilyPlants_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFamilyPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.index = iprot.readI32();
                struct.setIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFamilyPlants_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFamilyPlants_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteFamilyPlants_argsTupleScheme getScheme() {
        return new deleteFamilyPlants_argsTupleScheme();
      }
    }

    private static class deleteFamilyPlants_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteFamilyPlants_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFamilyPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIndex()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIndex()) {
          oprot.writeI32(struct.index);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFamilyPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.index = iprot.readI32();
          struct.setIndexIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteFamilyPlants_result implements org.apache.thrift.TBase<deleteFamilyPlants_result, deleteFamilyPlants_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFamilyPlants_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFamilyPlants_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteFamilyPlants_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteFamilyPlants_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFamilyPlants_result.class, metaDataMap);
    }

    public deleteFamilyPlants_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFamilyPlants_result(deleteFamilyPlants_result other) {
    }

    public deleteFamilyPlants_result deepCopy() {
      return new deleteFamilyPlants_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFamilyPlants_result)
        return this.equals((deleteFamilyPlants_result)that);
      return false;
    }

    public boolean equals(deleteFamilyPlants_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(deleteFamilyPlants_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFamilyPlants_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFamilyPlants_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteFamilyPlants_resultStandardScheme getScheme() {
        return new deleteFamilyPlants_resultStandardScheme();
      }
    }

    private static class deleteFamilyPlants_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteFamilyPlants_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFamilyPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFamilyPlants_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFamilyPlants_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteFamilyPlants_resultTupleScheme getScheme() {
        return new deleteFamilyPlants_resultTupleScheme();
      }
    }

    private static class deleteFamilyPlants_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteFamilyPlants_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFamilyPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFamilyPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changeFamilyPlants_args implements org.apache.thrift.TBase<changeFamilyPlants_args, changeFamilyPlants_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeFamilyPlants_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeFamilyPlants_args");

    private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FAMILY_PLANTS_FIELD_DESC = new org.apache.thrift.protocol.TField("familyPlants", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changeFamilyPlants_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changeFamilyPlants_argsTupleSchemeFactory();

    public int index; // required
    public FamilyPlants familyPlants; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INDEX((short)1, "index"),
      FAMILY_PLANTS((short)2, "familyPlants");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INDEX
            return INDEX;
          case 2: // FAMILY_PLANTS
            return FAMILY_PLANTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FAMILY_PLANTS, new org.apache.thrift.meta_data.FieldMetaData("familyPlants", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FamilyPlants.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeFamilyPlants_args.class, metaDataMap);
    }

    public changeFamilyPlants_args() {
    }

    public changeFamilyPlants_args(
      int index,
      FamilyPlants familyPlants)
    {
      this();
      this.index = index;
      setIndexIsSet(true);
      this.familyPlants = familyPlants;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeFamilyPlants_args(changeFamilyPlants_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.index = other.index;
      if (other.isSetFamilyPlants()) {
        this.familyPlants = new FamilyPlants(other.familyPlants);
      }
    }

    public changeFamilyPlants_args deepCopy() {
      return new changeFamilyPlants_args(this);
    }

    @Override
    public void clear() {
      setIndexIsSet(false);
      this.index = 0;
      this.familyPlants = null;
    }

    public int getIndex() {
      return this.index;
    }

    public changeFamilyPlants_args setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
      return this;
    }

    public void unsetIndex() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    public void setIndexIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
    }

    public FamilyPlants getFamilyPlants() {
      return this.familyPlants;
    }

    public changeFamilyPlants_args setFamilyPlants(FamilyPlants familyPlants) {
      this.familyPlants = familyPlants;
      return this;
    }

    public void unsetFamilyPlants() {
      this.familyPlants = null;
    }

    /** Returns true if field familyPlants is set (has been assigned a value) and false otherwise */
    public boolean isSetFamilyPlants() {
      return this.familyPlants != null;
    }

    public void setFamilyPlantsIsSet(boolean value) {
      if (!value) {
        this.familyPlants = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((Integer)value);
        }
        break;

      case FAMILY_PLANTS:
        if (value == null) {
          unsetFamilyPlants();
        } else {
          setFamilyPlants((FamilyPlants)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INDEX:
        return getIndex();

      case FAMILY_PLANTS:
        return getFamilyPlants();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INDEX:
        return isSetIndex();
      case FAMILY_PLANTS:
        return isSetFamilyPlants();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeFamilyPlants_args)
        return this.equals((changeFamilyPlants_args)that);
      return false;
    }

    public boolean equals(changeFamilyPlants_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      boolean this_present_familyPlants = true && this.isSetFamilyPlants();
      boolean that_present_familyPlants = true && that.isSetFamilyPlants();
      if (this_present_familyPlants || that_present_familyPlants) {
        if (!(this_present_familyPlants && that_present_familyPlants))
          return false;
        if (!this.familyPlants.equals(that.familyPlants))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + index;

      hashCode = hashCode * 8191 + ((isSetFamilyPlants()) ? 131071 : 524287);
      if (isSetFamilyPlants())
        hashCode = hashCode * 8191 + familyPlants.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changeFamilyPlants_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFamilyPlants()).compareTo(other.isSetFamilyPlants());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamilyPlants()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyPlants, other.familyPlants);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeFamilyPlants_args(");
      boolean first = true;

      sb.append("index:");
      sb.append(this.index);
      first = false;
      if (!first) sb.append(", ");
      sb.append("familyPlants:");
      if (this.familyPlants == null) {
        sb.append("null");
      } else {
        sb.append(this.familyPlants);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (familyPlants != null) {
        familyPlants.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeFamilyPlants_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeFamilyPlants_argsStandardScheme getScheme() {
        return new changeFamilyPlants_argsStandardScheme();
      }
    }

    private static class changeFamilyPlants_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<changeFamilyPlants_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeFamilyPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.index = iprot.readI32();
                struct.setIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FAMILY_PLANTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.familyPlants = new FamilyPlants();
                struct.familyPlants.read(iprot);
                struct.setFamilyPlantsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeFamilyPlants_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
        if (struct.familyPlants != null) {
          oprot.writeFieldBegin(FAMILY_PLANTS_FIELD_DESC);
          struct.familyPlants.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeFamilyPlants_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeFamilyPlants_argsTupleScheme getScheme() {
        return new changeFamilyPlants_argsTupleScheme();
      }
    }

    private static class changeFamilyPlants_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<changeFamilyPlants_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeFamilyPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIndex()) {
          optionals.set(0);
        }
        if (struct.isSetFamilyPlants()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIndex()) {
          oprot.writeI32(struct.index);
        }
        if (struct.isSetFamilyPlants()) {
          struct.familyPlants.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeFamilyPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.index = iprot.readI32();
          struct.setIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.familyPlants = new FamilyPlants();
          struct.familyPlants.read(iprot);
          struct.setFamilyPlantsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changeFamilyPlants_result implements org.apache.thrift.TBase<changeFamilyPlants_result, changeFamilyPlants_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeFamilyPlants_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeFamilyPlants_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changeFamilyPlants_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changeFamilyPlants_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeFamilyPlants_result.class, metaDataMap);
    }

    public changeFamilyPlants_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeFamilyPlants_result(changeFamilyPlants_result other) {
    }

    public changeFamilyPlants_result deepCopy() {
      return new changeFamilyPlants_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeFamilyPlants_result)
        return this.equals((changeFamilyPlants_result)that);
      return false;
    }

    public boolean equals(changeFamilyPlants_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(changeFamilyPlants_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeFamilyPlants_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeFamilyPlants_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeFamilyPlants_resultStandardScheme getScheme() {
        return new changeFamilyPlants_resultStandardScheme();
      }
    }

    private static class changeFamilyPlants_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<changeFamilyPlants_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeFamilyPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeFamilyPlants_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeFamilyPlants_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeFamilyPlants_resultTupleScheme getScheme() {
        return new changeFamilyPlants_resultTupleScheme();
      }
    }

    private static class changeFamilyPlants_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<changeFamilyPlants_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeFamilyPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeFamilyPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getListPlants_args implements org.apache.thrift.TBase<getListPlants_args, getListPlants_args._Fields>, java.io.Serializable, Cloneable, Comparable<getListPlants_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListPlants_args");

    private static final org.apache.thrift.protocol.TField INDEX_FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("indexFamily", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getListPlants_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getListPlants_argsTupleSchemeFactory();

    public int indexFamily; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INDEX_FAMILY((short)1, "indexFamily");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INDEX_FAMILY
            return INDEX_FAMILY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INDEXFAMILY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INDEX_FAMILY, new org.apache.thrift.meta_data.FieldMetaData("indexFamily", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListPlants_args.class, metaDataMap);
    }

    public getListPlants_args() {
    }

    public getListPlants_args(
      int indexFamily)
    {
      this();
      this.indexFamily = indexFamily;
      setIndexFamilyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListPlants_args(getListPlants_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.indexFamily = other.indexFamily;
    }

    public getListPlants_args deepCopy() {
      return new getListPlants_args(this);
    }

    @Override
    public void clear() {
      setIndexFamilyIsSet(false);
      this.indexFamily = 0;
    }

    public int getIndexFamily() {
      return this.indexFamily;
    }

    public getListPlants_args setIndexFamily(int indexFamily) {
      this.indexFamily = indexFamily;
      setIndexFamilyIsSet(true);
      return this;
    }

    public void unsetIndexFamily() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEXFAMILY_ISSET_ID);
    }

    /** Returns true if field indexFamily is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexFamily() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEXFAMILY_ISSET_ID);
    }

    public void setIndexFamilyIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEXFAMILY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INDEX_FAMILY:
        if (value == null) {
          unsetIndexFamily();
        } else {
          setIndexFamily((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INDEX_FAMILY:
        return getIndexFamily();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INDEX_FAMILY:
        return isSetIndexFamily();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListPlants_args)
        return this.equals((getListPlants_args)that);
      return false;
    }

    public boolean equals(getListPlants_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_indexFamily = true;
      boolean that_present_indexFamily = true;
      if (this_present_indexFamily || that_present_indexFamily) {
        if (!(this_present_indexFamily && that_present_indexFamily))
          return false;
        if (this.indexFamily != that.indexFamily)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + indexFamily;

      return hashCode;
    }

    @Override
    public int compareTo(getListPlants_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIndexFamily()).compareTo(other.isSetIndexFamily());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexFamily()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexFamily, other.indexFamily);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListPlants_args(");
      boolean first = true;

      sb.append("indexFamily:");
      sb.append(this.indexFamily);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListPlants_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getListPlants_argsStandardScheme getScheme() {
        return new getListPlants_argsStandardScheme();
      }
    }

    private static class getListPlants_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getListPlants_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INDEX_FAMILY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.indexFamily = iprot.readI32();
                struct.setIndexFamilyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListPlants_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INDEX_FAMILY_FIELD_DESC);
        oprot.writeI32(struct.indexFamily);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListPlants_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getListPlants_argsTupleScheme getScheme() {
        return new getListPlants_argsTupleScheme();
      }
    }

    private static class getListPlants_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getListPlants_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIndexFamily()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIndexFamily()) {
          oprot.writeI32(struct.indexFamily);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListPlants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.indexFamily = iprot.readI32();
          struct.setIndexFamilyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getListPlants_result implements org.apache.thrift.TBase<getListPlants_result, getListPlants_result._Fields>, java.io.Serializable, Cloneable, Comparable<getListPlants_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListPlants_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getListPlants_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getListPlants_resultTupleSchemeFactory();

    public java.util.List<Plant> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Plant.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListPlants_result.class, metaDataMap);
    }

    public getListPlants_result() {
    }

    public getListPlants_result(
      java.util.List<Plant> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListPlants_result(getListPlants_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Plant> __this__success = new java.util.ArrayList<Plant>(other.success.size());
        for (Plant other_element : other.success) {
          __this__success.add(new Plant(other_element));
        }
        this.success = __this__success;
      }
    }

    public getListPlants_result deepCopy() {
      return new getListPlants_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Plant> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Plant elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Plant>();
      }
      this.success.add(elem);
    }

    public java.util.List<Plant> getSuccess() {
      return this.success;
    }

    public getListPlants_result setSuccess(java.util.List<Plant> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Plant>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListPlants_result)
        return this.equals((getListPlants_result)that);
      return false;
    }

    public boolean equals(getListPlants_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getListPlants_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListPlants_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListPlants_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getListPlants_resultStandardScheme getScheme() {
        return new getListPlants_resultStandardScheme();
      }
    }

    private static class getListPlants_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getListPlants_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Plant>(_list16.size);
                  Plant _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new Plant();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListPlants_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Plant _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListPlants_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getListPlants_resultTupleScheme getScheme() {
        return new getListPlants_resultTupleScheme();
      }
    }

    private static class getListPlants_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getListPlants_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Plant _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListPlants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Plant>(_list21.size);
            Plant _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new Plant();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addPlant_args implements org.apache.thrift.TBase<addPlant_args, addPlant_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPlant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPlant_args");

    private static final org.apache.thrift.protocol.TField PLANT_FIELD_DESC = new org.apache.thrift.protocol.TField("plant", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INDEX_FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("indexFamily", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addPlant_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addPlant_argsTupleSchemeFactory();

    public Plant plant; // required
    public int indexFamily; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLANT((short)1, "plant"),
      INDEX_FAMILY((short)2, "indexFamily");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLANT
            return PLANT;
          case 2: // INDEX_FAMILY
            return INDEX_FAMILY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INDEXFAMILY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLANT, new org.apache.thrift.meta_data.FieldMetaData("plant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Plant.class)));
      tmpMap.put(_Fields.INDEX_FAMILY, new org.apache.thrift.meta_data.FieldMetaData("indexFamily", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPlant_args.class, metaDataMap);
    }

    public addPlant_args() {
    }

    public addPlant_args(
      Plant plant,
      int indexFamily)
    {
      this();
      this.plant = plant;
      this.indexFamily = indexFamily;
      setIndexFamilyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPlant_args(addPlant_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlant()) {
        this.plant = new Plant(other.plant);
      }
      this.indexFamily = other.indexFamily;
    }

    public addPlant_args deepCopy() {
      return new addPlant_args(this);
    }

    @Override
    public void clear() {
      this.plant = null;
      setIndexFamilyIsSet(false);
      this.indexFamily = 0;
    }

    public Plant getPlant() {
      return this.plant;
    }

    public addPlant_args setPlant(Plant plant) {
      this.plant = plant;
      return this;
    }

    public void unsetPlant() {
      this.plant = null;
    }

    /** Returns true if field plant is set (has been assigned a value) and false otherwise */
    public boolean isSetPlant() {
      return this.plant != null;
    }

    public void setPlantIsSet(boolean value) {
      if (!value) {
        this.plant = null;
      }
    }

    public int getIndexFamily() {
      return this.indexFamily;
    }

    public addPlant_args setIndexFamily(int indexFamily) {
      this.indexFamily = indexFamily;
      setIndexFamilyIsSet(true);
      return this;
    }

    public void unsetIndexFamily() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEXFAMILY_ISSET_ID);
    }

    /** Returns true if field indexFamily is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexFamily() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEXFAMILY_ISSET_ID);
    }

    public void setIndexFamilyIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEXFAMILY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLANT:
        if (value == null) {
          unsetPlant();
        } else {
          setPlant((Plant)value);
        }
        break;

      case INDEX_FAMILY:
        if (value == null) {
          unsetIndexFamily();
        } else {
          setIndexFamily((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLANT:
        return getPlant();

      case INDEX_FAMILY:
        return getIndexFamily();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLANT:
        return isSetPlant();
      case INDEX_FAMILY:
        return isSetIndexFamily();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPlant_args)
        return this.equals((addPlant_args)that);
      return false;
    }

    public boolean equals(addPlant_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_plant = true && this.isSetPlant();
      boolean that_present_plant = true && that.isSetPlant();
      if (this_present_plant || that_present_plant) {
        if (!(this_present_plant && that_present_plant))
          return false;
        if (!this.plant.equals(that.plant))
          return false;
      }

      boolean this_present_indexFamily = true;
      boolean that_present_indexFamily = true;
      if (this_present_indexFamily || that_present_indexFamily) {
        if (!(this_present_indexFamily && that_present_indexFamily))
          return false;
        if (this.indexFamily != that.indexFamily)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPlant()) ? 131071 : 524287);
      if (isSetPlant())
        hashCode = hashCode * 8191 + plant.hashCode();

      hashCode = hashCode * 8191 + indexFamily;

      return hashCode;
    }

    @Override
    public int compareTo(addPlant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlant()).compareTo(other.isSetPlant());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlant()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plant, other.plant);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIndexFamily()).compareTo(other.isSetIndexFamily());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexFamily()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexFamily, other.indexFamily);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPlant_args(");
      boolean first = true;

      sb.append("plant:");
      if (this.plant == null) {
        sb.append("null");
      } else {
        sb.append(this.plant);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexFamily:");
      sb.append(this.indexFamily);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (plant != null) {
        plant.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPlant_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addPlant_argsStandardScheme getScheme() {
        return new addPlant_argsStandardScheme();
      }
    }

    private static class addPlant_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addPlant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPlant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLANT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.plant = new Plant();
                struct.plant.read(iprot);
                struct.setPlantIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INDEX_FAMILY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.indexFamily = iprot.readI32();
                struct.setIndexFamilyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPlant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.plant != null) {
          oprot.writeFieldBegin(PLANT_FIELD_DESC);
          struct.plant.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INDEX_FAMILY_FIELD_DESC);
        oprot.writeI32(struct.indexFamily);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPlant_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addPlant_argsTupleScheme getScheme() {
        return new addPlant_argsTupleScheme();
      }
    }

    private static class addPlant_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addPlant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPlant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPlant()) {
          optionals.set(0);
        }
        if (struct.isSetIndexFamily()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlant()) {
          struct.plant.write(oprot);
        }
        if (struct.isSetIndexFamily()) {
          oprot.writeI32(struct.indexFamily);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPlant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.plant = new Plant();
          struct.plant.read(iprot);
          struct.setPlantIsSet(true);
        }
        if (incoming.get(1)) {
          struct.indexFamily = iprot.readI32();
          struct.setIndexFamilyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addPlant_result implements org.apache.thrift.TBase<addPlant_result, addPlant_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPlant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPlant_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addPlant_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addPlant_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPlant_result.class, metaDataMap);
    }

    public addPlant_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPlant_result(addPlant_result other) {
    }

    public addPlant_result deepCopy() {
      return new addPlant_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPlant_result)
        return this.equals((addPlant_result)that);
      return false;
    }

    public boolean equals(addPlant_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addPlant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPlant_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPlant_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addPlant_resultStandardScheme getScheme() {
        return new addPlant_resultStandardScheme();
      }
    }

    private static class addPlant_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addPlant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPlant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPlant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPlant_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addPlant_resultTupleScheme getScheme() {
        return new addPlant_resultTupleScheme();
      }
    }

    private static class addPlant_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addPlant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPlant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPlant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deletePlant_args implements org.apache.thrift.TBase<deletePlant_args, deletePlant_args._Fields>, java.io.Serializable, Cloneable, Comparable<deletePlant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePlant_args");

    private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField INDEX_FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("indexFamily", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deletePlant_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deletePlant_argsTupleSchemeFactory();

    public int index; // required
    public int indexFamily; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INDEX((short)1, "index"),
      INDEX_FAMILY((short)2, "indexFamily");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INDEX
            return INDEX;
          case 2: // INDEX_FAMILY
            return INDEX_FAMILY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INDEX_ISSET_ID = 0;
    private static final int __INDEXFAMILY_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.INDEX_FAMILY, new org.apache.thrift.meta_data.FieldMetaData("indexFamily", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePlant_args.class, metaDataMap);
    }

    public deletePlant_args() {
    }

    public deletePlant_args(
      int index,
      int indexFamily)
    {
      this();
      this.index = index;
      setIndexIsSet(true);
      this.indexFamily = indexFamily;
      setIndexFamilyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePlant_args(deletePlant_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.index = other.index;
      this.indexFamily = other.indexFamily;
    }

    public deletePlant_args deepCopy() {
      return new deletePlant_args(this);
    }

    @Override
    public void clear() {
      setIndexIsSet(false);
      this.index = 0;
      setIndexFamilyIsSet(false);
      this.indexFamily = 0;
    }

    public int getIndex() {
      return this.index;
    }

    public deletePlant_args setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
      return this;
    }

    public void unsetIndex() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    public void setIndexIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
    }

    public int getIndexFamily() {
      return this.indexFamily;
    }

    public deletePlant_args setIndexFamily(int indexFamily) {
      this.indexFamily = indexFamily;
      setIndexFamilyIsSet(true);
      return this;
    }

    public void unsetIndexFamily() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEXFAMILY_ISSET_ID);
    }

    /** Returns true if field indexFamily is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexFamily() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEXFAMILY_ISSET_ID);
    }

    public void setIndexFamilyIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEXFAMILY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((Integer)value);
        }
        break;

      case INDEX_FAMILY:
        if (value == null) {
          unsetIndexFamily();
        } else {
          setIndexFamily((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INDEX:
        return getIndex();

      case INDEX_FAMILY:
        return getIndexFamily();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INDEX:
        return isSetIndex();
      case INDEX_FAMILY:
        return isSetIndexFamily();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePlant_args)
        return this.equals((deletePlant_args)that);
      return false;
    }

    public boolean equals(deletePlant_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      boolean this_present_indexFamily = true;
      boolean that_present_indexFamily = true;
      if (this_present_indexFamily || that_present_indexFamily) {
        if (!(this_present_indexFamily && that_present_indexFamily))
          return false;
        if (this.indexFamily != that.indexFamily)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + index;

      hashCode = hashCode * 8191 + indexFamily;

      return hashCode;
    }

    @Override
    public int compareTo(deletePlant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIndexFamily()).compareTo(other.isSetIndexFamily());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexFamily()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexFamily, other.indexFamily);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePlant_args(");
      boolean first = true;

      sb.append("index:");
      sb.append(this.index);
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexFamily:");
      sb.append(this.indexFamily);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePlant_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletePlant_argsStandardScheme getScheme() {
        return new deletePlant_argsStandardScheme();
      }
    }

    private static class deletePlant_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deletePlant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePlant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.index = iprot.readI32();
                struct.setIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INDEX_FAMILY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.indexFamily = iprot.readI32();
                struct.setIndexFamilyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePlant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INDEX_FAMILY_FIELD_DESC);
        oprot.writeI32(struct.indexFamily);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePlant_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletePlant_argsTupleScheme getScheme() {
        return new deletePlant_argsTupleScheme();
      }
    }

    private static class deletePlant_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deletePlant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePlant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIndex()) {
          optionals.set(0);
        }
        if (struct.isSetIndexFamily()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIndex()) {
          oprot.writeI32(struct.index);
        }
        if (struct.isSetIndexFamily()) {
          oprot.writeI32(struct.indexFamily);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePlant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.index = iprot.readI32();
          struct.setIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.indexFamily = iprot.readI32();
          struct.setIndexFamilyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deletePlant_result implements org.apache.thrift.TBase<deletePlant_result, deletePlant_result._Fields>, java.io.Serializable, Cloneable, Comparable<deletePlant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePlant_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deletePlant_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deletePlant_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePlant_result.class, metaDataMap);
    }

    public deletePlant_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePlant_result(deletePlant_result other) {
    }

    public deletePlant_result deepCopy() {
      return new deletePlant_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePlant_result)
        return this.equals((deletePlant_result)that);
      return false;
    }

    public boolean equals(deletePlant_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(deletePlant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePlant_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePlant_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletePlant_resultStandardScheme getScheme() {
        return new deletePlant_resultStandardScheme();
      }
    }

    private static class deletePlant_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deletePlant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePlant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePlant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePlant_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletePlant_resultTupleScheme getScheme() {
        return new deletePlant_resultTupleScheme();
      }
    }

    private static class deletePlant_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deletePlant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePlant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePlant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changePlant_args implements org.apache.thrift.TBase<changePlant_args, changePlant_args._Fields>, java.io.Serializable, Cloneable, Comparable<changePlant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changePlant_args");

    private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PLANT_FIELD_DESC = new org.apache.thrift.protocol.TField("plant", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField INDEX_FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("indexFamily", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changePlant_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changePlant_argsTupleSchemeFactory();

    public int index; // required
    public Plant plant; // required
    public int indexFamily; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INDEX((short)1, "index"),
      PLANT((short)2, "plant"),
      INDEX_FAMILY((short)3, "indexFamily");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INDEX
            return INDEX;
          case 2: // PLANT
            return PLANT;
          case 3: // INDEX_FAMILY
            return INDEX_FAMILY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INDEX_ISSET_ID = 0;
    private static final int __INDEXFAMILY_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLANT, new org.apache.thrift.meta_data.FieldMetaData("plant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Plant.class)));
      tmpMap.put(_Fields.INDEX_FAMILY, new org.apache.thrift.meta_data.FieldMetaData("indexFamily", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changePlant_args.class, metaDataMap);
    }

    public changePlant_args() {
    }

    public changePlant_args(
      int index,
      Plant plant,
      int indexFamily)
    {
      this();
      this.index = index;
      setIndexIsSet(true);
      this.plant = plant;
      this.indexFamily = indexFamily;
      setIndexFamilyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changePlant_args(changePlant_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.index = other.index;
      if (other.isSetPlant()) {
        this.plant = new Plant(other.plant);
      }
      this.indexFamily = other.indexFamily;
    }

    public changePlant_args deepCopy() {
      return new changePlant_args(this);
    }

    @Override
    public void clear() {
      setIndexIsSet(false);
      this.index = 0;
      this.plant = null;
      setIndexFamilyIsSet(false);
      this.indexFamily = 0;
    }

    public int getIndex() {
      return this.index;
    }

    public changePlant_args setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
      return this;
    }

    public void unsetIndex() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    public void setIndexIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
    }

    public Plant getPlant() {
      return this.plant;
    }

    public changePlant_args setPlant(Plant plant) {
      this.plant = plant;
      return this;
    }

    public void unsetPlant() {
      this.plant = null;
    }

    /** Returns true if field plant is set (has been assigned a value) and false otherwise */
    public boolean isSetPlant() {
      return this.plant != null;
    }

    public void setPlantIsSet(boolean value) {
      if (!value) {
        this.plant = null;
      }
    }

    public int getIndexFamily() {
      return this.indexFamily;
    }

    public changePlant_args setIndexFamily(int indexFamily) {
      this.indexFamily = indexFamily;
      setIndexFamilyIsSet(true);
      return this;
    }

    public void unsetIndexFamily() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEXFAMILY_ISSET_ID);
    }

    /** Returns true if field indexFamily is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexFamily() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEXFAMILY_ISSET_ID);
    }

    public void setIndexFamilyIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEXFAMILY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((Integer)value);
        }
        break;

      case PLANT:
        if (value == null) {
          unsetPlant();
        } else {
          setPlant((Plant)value);
        }
        break;

      case INDEX_FAMILY:
        if (value == null) {
          unsetIndexFamily();
        } else {
          setIndexFamily((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INDEX:
        return getIndex();

      case PLANT:
        return getPlant();

      case INDEX_FAMILY:
        return getIndexFamily();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INDEX:
        return isSetIndex();
      case PLANT:
        return isSetPlant();
      case INDEX_FAMILY:
        return isSetIndexFamily();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changePlant_args)
        return this.equals((changePlant_args)that);
      return false;
    }

    public boolean equals(changePlant_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      boolean this_present_plant = true && this.isSetPlant();
      boolean that_present_plant = true && that.isSetPlant();
      if (this_present_plant || that_present_plant) {
        if (!(this_present_plant && that_present_plant))
          return false;
        if (!this.plant.equals(that.plant))
          return false;
      }

      boolean this_present_indexFamily = true;
      boolean that_present_indexFamily = true;
      if (this_present_indexFamily || that_present_indexFamily) {
        if (!(this_present_indexFamily && that_present_indexFamily))
          return false;
        if (this.indexFamily != that.indexFamily)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + index;

      hashCode = hashCode * 8191 + ((isSetPlant()) ? 131071 : 524287);
      if (isSetPlant())
        hashCode = hashCode * 8191 + plant.hashCode();

      hashCode = hashCode * 8191 + indexFamily;

      return hashCode;
    }

    @Override
    public int compareTo(changePlant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlant()).compareTo(other.isSetPlant());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlant()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plant, other.plant);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIndexFamily()).compareTo(other.isSetIndexFamily());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexFamily()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexFamily, other.indexFamily);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changePlant_args(");
      boolean first = true;

      sb.append("index:");
      sb.append(this.index);
      first = false;
      if (!first) sb.append(", ");
      sb.append("plant:");
      if (this.plant == null) {
        sb.append("null");
      } else {
        sb.append(this.plant);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexFamily:");
      sb.append(this.indexFamily);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (plant != null) {
        plant.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changePlant_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePlant_argsStandardScheme getScheme() {
        return new changePlant_argsStandardScheme();
      }
    }

    private static class changePlant_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<changePlant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changePlant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.index = iprot.readI32();
                struct.setIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLANT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.plant = new Plant();
                struct.plant.read(iprot);
                struct.setPlantIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INDEX_FAMILY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.indexFamily = iprot.readI32();
                struct.setIndexFamilyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changePlant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
        if (struct.plant != null) {
          oprot.writeFieldBegin(PLANT_FIELD_DESC);
          struct.plant.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INDEX_FAMILY_FIELD_DESC);
        oprot.writeI32(struct.indexFamily);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changePlant_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePlant_argsTupleScheme getScheme() {
        return new changePlant_argsTupleScheme();
      }
    }

    private static class changePlant_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<changePlant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changePlant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIndex()) {
          optionals.set(0);
        }
        if (struct.isSetPlant()) {
          optionals.set(1);
        }
        if (struct.isSetIndexFamily()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIndex()) {
          oprot.writeI32(struct.index);
        }
        if (struct.isSetPlant()) {
          struct.plant.write(oprot);
        }
        if (struct.isSetIndexFamily()) {
          oprot.writeI32(struct.indexFamily);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changePlant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.index = iprot.readI32();
          struct.setIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.plant = new Plant();
          struct.plant.read(iprot);
          struct.setPlantIsSet(true);
        }
        if (incoming.get(2)) {
          struct.indexFamily = iprot.readI32();
          struct.setIndexFamilyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changePlant_result implements org.apache.thrift.TBase<changePlant_result, changePlant_result._Fields>, java.io.Serializable, Cloneable, Comparable<changePlant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changePlant_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changePlant_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changePlant_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changePlant_result.class, metaDataMap);
    }

    public changePlant_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changePlant_result(changePlant_result other) {
    }

    public changePlant_result deepCopy() {
      return new changePlant_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changePlant_result)
        return this.equals((changePlant_result)that);
      return false;
    }

    public boolean equals(changePlant_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(changePlant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changePlant_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changePlant_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePlant_resultStandardScheme getScheme() {
        return new changePlant_resultStandardScheme();
      }
    }

    private static class changePlant_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<changePlant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changePlant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changePlant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changePlant_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePlant_resultTupleScheme getScheme() {
        return new changePlant_resultTupleScheme();
      }
    }

    private static class changePlant_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<changePlant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changePlant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changePlant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
