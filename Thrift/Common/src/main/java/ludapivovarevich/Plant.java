/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ludapivovarevich;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-04-17")
public class Plant implements org.apache.thrift.TBase<Plant, Plant._Fields>, java.io.Serializable, Cloneable, Comparable<Plant> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Plant");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PLANT_FIELD_DESC = new org.apache.thrift.protocol.TField("plant", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LEAF_FIELD_DESC = new org.apache.thrift.protocol.TField("leaf", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STEM_FIELD_DESC = new org.apache.thrift.protocol.TField("stem", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PlantStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PlantTupleSchemeFactory();

  public int id; // required
  public String plant; // required
  public String leaf; // required
  public String stem; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PLANT((short)2, "plant"),
    LEAF((short)3, "leaf"),
    STEM((short)4, "stem");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PLANT
          return PLANT;
        case 3: // LEAF
          return LEAF;
        case 4: // STEM
          return STEM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLANT, new org.apache.thrift.meta_data.FieldMetaData("plant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEAF, new org.apache.thrift.meta_data.FieldMetaData("leaf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STEM, new org.apache.thrift.meta_data.FieldMetaData("stem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Plant.class, metaDataMap);
  }

  public Plant() {
  }

  public Plant(
    int id,
    String plant,
    String leaf,
    String stem)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.plant = plant;
    this.leaf = leaf;
    this.stem = stem;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Plant(Plant other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetPlant()) {
      this.plant = other.plant;
    }
    if (other.isSetLeaf()) {
      this.leaf = other.leaf;
    }
    if (other.isSetStem()) {
      this.stem = other.stem;
    }
  }

  public Plant deepCopy() {
    return new Plant(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.plant = null;
    this.leaf = null;
    this.stem = null;
  }

  public int getId() {
    return this.id;
  }

  public Plant setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getPlant() {
    return this.plant;
  }

  public Plant setPlant(String plant) {
    this.plant = plant;
    return this;
  }

  public void unsetPlant() {
    this.plant = null;
  }

  /** Returns true if field plant is set (has been assigned a value) and false otherwise */
  public boolean isSetPlant() {
    return this.plant != null;
  }

  public void setPlantIsSet(boolean value) {
    if (!value) {
      this.plant = null;
    }
  }

  public String getLeaf() {
    return this.leaf;
  }

  public Plant setLeaf(String leaf) {
    this.leaf = leaf;
    return this;
  }

  public void unsetLeaf() {
    this.leaf = null;
  }

  /** Returns true if field leaf is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaf() {
    return this.leaf != null;
  }

  public void setLeafIsSet(boolean value) {
    if (!value) {
      this.leaf = null;
    }
  }

  public String getStem() {
    return this.stem;
  }

  public Plant setStem(String stem) {
    this.stem = stem;
    return this;
  }

  public void unsetStem() {
    this.stem = null;
  }

  /** Returns true if field stem is set (has been assigned a value) and false otherwise */
  public boolean isSetStem() {
    return this.stem != null;
  }

  public void setStemIsSet(boolean value) {
    if (!value) {
      this.stem = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PLANT:
      if (value == null) {
        unsetPlant();
      } else {
        setPlant((String)value);
      }
      break;

    case LEAF:
      if (value == null) {
        unsetLeaf();
      } else {
        setLeaf((String)value);
      }
      break;

    case STEM:
      if (value == null) {
        unsetStem();
      } else {
        setStem((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PLANT:
      return getPlant();

    case LEAF:
      return getLeaf();

    case STEM:
      return getStem();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PLANT:
      return isSetPlant();
    case LEAF:
      return isSetLeaf();
    case STEM:
      return isSetStem();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Plant)
      return this.equals((Plant)that);
    return false;
  }

  public boolean equals(Plant that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_plant = true && this.isSetPlant();
    boolean that_present_plant = true && that.isSetPlant();
    if (this_present_plant || that_present_plant) {
      if (!(this_present_plant && that_present_plant))
        return false;
      if (!this.plant.equals(that.plant))
        return false;
    }

    boolean this_present_leaf = true && this.isSetLeaf();
    boolean that_present_leaf = true && that.isSetLeaf();
    if (this_present_leaf || that_present_leaf) {
      if (!(this_present_leaf && that_present_leaf))
        return false;
      if (!this.leaf.equals(that.leaf))
        return false;
    }

    boolean this_present_stem = true && this.isSetStem();
    boolean that_present_stem = true && that.isSetStem();
    if (this_present_stem || that_present_stem) {
      if (!(this_present_stem && that_present_stem))
        return false;
      if (!this.stem.equals(that.stem))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetPlant()) ? 131071 : 524287);
    if (isSetPlant())
      hashCode = hashCode * 8191 + plant.hashCode();

    hashCode = hashCode * 8191 + ((isSetLeaf()) ? 131071 : 524287);
    if (isSetLeaf())
      hashCode = hashCode * 8191 + leaf.hashCode();

    hashCode = hashCode * 8191 + ((isSetStem()) ? 131071 : 524287);
    if (isSetStem())
      hashCode = hashCode * 8191 + stem.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Plant other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlant()).compareTo(other.isSetPlant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plant, other.plant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaf()).compareTo(other.isSetLeaf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaf, other.leaf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStem()).compareTo(other.isSetStem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stem, other.stem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Plant(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("plant:");
    if (this.plant == null) {
      sb.append("null");
    } else {
      sb.append(this.plant);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("leaf:");
    if (this.leaf == null) {
      sb.append("null");
    } else {
      sb.append(this.leaf);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stem:");
    if (this.stem == null) {
      sb.append("null");
    } else {
      sb.append(this.stem);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlantStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PlantStandardScheme getScheme() {
      return new PlantStandardScheme();
    }
  }

  private static class PlantStandardScheme extends org.apache.thrift.scheme.StandardScheme<Plant> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Plant struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLANT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plant = iprot.readString();
              struct.setPlantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEAF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.leaf = iprot.readString();
              struct.setLeafIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stem = iprot.readString();
              struct.setStemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Plant struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.plant != null) {
        oprot.writeFieldBegin(PLANT_FIELD_DESC);
        oprot.writeString(struct.plant);
        oprot.writeFieldEnd();
      }
      if (struct.leaf != null) {
        oprot.writeFieldBegin(LEAF_FIELD_DESC);
        oprot.writeString(struct.leaf);
        oprot.writeFieldEnd();
      }
      if (struct.stem != null) {
        oprot.writeFieldBegin(STEM_FIELD_DESC);
        oprot.writeString(struct.stem);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlantTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PlantTupleScheme getScheme() {
      return new PlantTupleScheme();
    }
  }

  private static class PlantTupleScheme extends org.apache.thrift.scheme.TupleScheme<Plant> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Plant struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPlant()) {
        optionals.set(1);
      }
      if (struct.isSetLeaf()) {
        optionals.set(2);
      }
      if (struct.isSetStem()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetPlant()) {
        oprot.writeString(struct.plant);
      }
      if (struct.isSetLeaf()) {
        oprot.writeString(struct.leaf);
      }
      if (struct.isSetStem()) {
        oprot.writeString(struct.stem);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Plant struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.plant = iprot.readString();
        struct.setPlantIsSet(true);
      }
      if (incoming.get(2)) {
        struct.leaf = iprot.readString();
        struct.setLeafIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stem = iprot.readString();
        struct.setStemIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

