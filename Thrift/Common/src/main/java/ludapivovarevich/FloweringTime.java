/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ludapivovarevich;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-04-17")
public class FloweringTime implements org.apache.thrift.TBase<FloweringTime, FloweringTime._Fields>, java.io.Serializable, Cloneable, Comparable<FloweringTime> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FloweringTime");

  private static final org.apache.thrift.protocol.TField FIRST_MONTH_FLOWERING_FIELD_DESC = new org.apache.thrift.protocol.TField("firstMonthFlowering", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_MONTH_FLOWERING_FIELD_DESC = new org.apache.thrift.protocol.TField("lastMonthFlowering", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FloweringTimeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FloweringTimeTupleSchemeFactory();

  public String firstMonthFlowering; // required
  public String lastMonthFlowering; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST_MONTH_FLOWERING((short)1, "firstMonthFlowering"),
    LAST_MONTH_FLOWERING((short)2, "lastMonthFlowering");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST_MONTH_FLOWERING
          return FIRST_MONTH_FLOWERING;
        case 2: // LAST_MONTH_FLOWERING
          return LAST_MONTH_FLOWERING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST_MONTH_FLOWERING, new org.apache.thrift.meta_data.FieldMetaData("firstMonthFlowering", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_MONTH_FLOWERING, new org.apache.thrift.meta_data.FieldMetaData("lastMonthFlowering", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FloweringTime.class, metaDataMap);
  }

  public FloweringTime() {
  }

  public FloweringTime(
    String firstMonthFlowering,
    String lastMonthFlowering)
  {
    this();
    this.firstMonthFlowering = firstMonthFlowering;
    this.lastMonthFlowering = lastMonthFlowering;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FloweringTime(FloweringTime other) {
    if (other.isSetFirstMonthFlowering()) {
      this.firstMonthFlowering = other.firstMonthFlowering;
    }
    if (other.isSetLastMonthFlowering()) {
      this.lastMonthFlowering = other.lastMonthFlowering;
    }
  }

  public FloweringTime deepCopy() {
    return new FloweringTime(this);
  }

  @Override
  public void clear() {
    this.firstMonthFlowering = null;
    this.lastMonthFlowering = null;
  }

  public String getFirstMonthFlowering() {
    return this.firstMonthFlowering;
  }

  public FloweringTime setFirstMonthFlowering(String firstMonthFlowering) {
    this.firstMonthFlowering = firstMonthFlowering;
    return this;
  }

  public void unsetFirstMonthFlowering() {
    this.firstMonthFlowering = null;
  }

  /** Returns true if field firstMonthFlowering is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstMonthFlowering() {
    return this.firstMonthFlowering != null;
  }

  public void setFirstMonthFloweringIsSet(boolean value) {
    if (!value) {
      this.firstMonthFlowering = null;
    }
  }

  public String getLastMonthFlowering() {
    return this.lastMonthFlowering;
  }

  public FloweringTime setLastMonthFlowering(String lastMonthFlowering) {
    this.lastMonthFlowering = lastMonthFlowering;
    return this;
  }

  public void unsetLastMonthFlowering() {
    this.lastMonthFlowering = null;
  }

  /** Returns true if field lastMonthFlowering is set (has been assigned a value) and false otherwise */
  public boolean isSetLastMonthFlowering() {
    return this.lastMonthFlowering != null;
  }

  public void setLastMonthFloweringIsSet(boolean value) {
    if (!value) {
      this.lastMonthFlowering = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRST_MONTH_FLOWERING:
      if (value == null) {
        unsetFirstMonthFlowering();
      } else {
        setFirstMonthFlowering((String)value);
      }
      break;

    case LAST_MONTH_FLOWERING:
      if (value == null) {
        unsetLastMonthFlowering();
      } else {
        setLastMonthFlowering((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST_MONTH_FLOWERING:
      return getFirstMonthFlowering();

    case LAST_MONTH_FLOWERING:
      return getLastMonthFlowering();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRST_MONTH_FLOWERING:
      return isSetFirstMonthFlowering();
    case LAST_MONTH_FLOWERING:
      return isSetLastMonthFlowering();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FloweringTime)
      return this.equals((FloweringTime)that);
    return false;
  }

  public boolean equals(FloweringTime that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_firstMonthFlowering = true && this.isSetFirstMonthFlowering();
    boolean that_present_firstMonthFlowering = true && that.isSetFirstMonthFlowering();
    if (this_present_firstMonthFlowering || that_present_firstMonthFlowering) {
      if (!(this_present_firstMonthFlowering && that_present_firstMonthFlowering))
        return false;
      if (!this.firstMonthFlowering.equals(that.firstMonthFlowering))
        return false;
    }

    boolean this_present_lastMonthFlowering = true && this.isSetLastMonthFlowering();
    boolean that_present_lastMonthFlowering = true && that.isSetLastMonthFlowering();
    if (this_present_lastMonthFlowering || that_present_lastMonthFlowering) {
      if (!(this_present_lastMonthFlowering && that_present_lastMonthFlowering))
        return false;
      if (!this.lastMonthFlowering.equals(that.lastMonthFlowering))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFirstMonthFlowering()) ? 131071 : 524287);
    if (isSetFirstMonthFlowering())
      hashCode = hashCode * 8191 + firstMonthFlowering.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastMonthFlowering()) ? 131071 : 524287);
    if (isSetLastMonthFlowering())
      hashCode = hashCode * 8191 + lastMonthFlowering.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FloweringTime other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFirstMonthFlowering()).compareTo(other.isSetFirstMonthFlowering());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstMonthFlowering()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstMonthFlowering, other.firstMonthFlowering);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastMonthFlowering()).compareTo(other.isSetLastMonthFlowering());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastMonthFlowering()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastMonthFlowering, other.lastMonthFlowering);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FloweringTime(");
    boolean first = true;

    sb.append("firstMonthFlowering:");
    if (this.firstMonthFlowering == null) {
      sb.append("null");
    } else {
      sb.append(this.firstMonthFlowering);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastMonthFlowering:");
    if (this.lastMonthFlowering == null) {
      sb.append("null");
    } else {
      sb.append(this.lastMonthFlowering);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FloweringTimeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FloweringTimeStandardScheme getScheme() {
      return new FloweringTimeStandardScheme();
    }
  }

  private static class FloweringTimeStandardScheme extends org.apache.thrift.scheme.StandardScheme<FloweringTime> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FloweringTime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRST_MONTH_FLOWERING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstMonthFlowering = iprot.readString();
              struct.setFirstMonthFloweringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST_MONTH_FLOWERING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastMonthFlowering = iprot.readString();
              struct.setLastMonthFloweringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FloweringTime struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.firstMonthFlowering != null) {
        oprot.writeFieldBegin(FIRST_MONTH_FLOWERING_FIELD_DESC);
        oprot.writeString(struct.firstMonthFlowering);
        oprot.writeFieldEnd();
      }
      if (struct.lastMonthFlowering != null) {
        oprot.writeFieldBegin(LAST_MONTH_FLOWERING_FIELD_DESC);
        oprot.writeString(struct.lastMonthFlowering);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FloweringTimeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FloweringTimeTupleScheme getScheme() {
      return new FloweringTimeTupleScheme();
    }
  }

  private static class FloweringTimeTupleScheme extends org.apache.thrift.scheme.TupleScheme<FloweringTime> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FloweringTime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFirstMonthFlowering()) {
        optionals.set(0);
      }
      if (struct.isSetLastMonthFlowering()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFirstMonthFlowering()) {
        oprot.writeString(struct.firstMonthFlowering);
      }
      if (struct.isSetLastMonthFlowering()) {
        oprot.writeString(struct.lastMonthFlowering);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FloweringTime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.firstMonthFlowering = iprot.readString();
        struct.setFirstMonthFloweringIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lastMonthFlowering = iprot.readString();
        struct.setLastMonthFloweringIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

